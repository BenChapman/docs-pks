---
title: Using PKS
owner: PKS
---

<p class="note"><strong>Note</strong>: The PKS documentation is under development. This topic will continue to be updated and expanded to reflect the most current information.</p>

This topic describes how to use Pivotal Container Service (PKS).

After an operator has [installed](installing.html) PKS, developers can use `curl` or the PKS CLI to do the following:

* [Create](#create-cluster) a Kubernetes cluster
* [Retrieve the credentials and configuration](#get-credentials) for a Kubernetes cluster so that developers can deploy application workloads to the cluster with `kubectl`
* [View](#view-cluster-list) the list of running Kubernetes clusters
* [View](#view-cluster) details about a Kubernetes cluster 
* [View](#view-cluster-plans) the list of available plans for deploying a Kubernetes cluster
* [Resize](#resize) the number of worker nodes in a Kubernetes cluster
* [Delete](#delete-cluster) a Kubernetes cluster

To deploy application workloads to a Kubernetes cluster, developers use `kubectl`, the Kubernetes CLI. 
To download and install `kubectl`, see the [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-curl) topic in the Kubernetes documentation.
For more information about using `kubectl`, see the `kubectl` [documentation](https://kubernetes.io/docs/user-guide/kubectl-overview/).

<p class="note"><strong>Note</strong>: Because PKS does not currently support the Kubernetes Service Catalog or the GCP Service Broker, binding clusters to Kubernetes services is not supported.</p>

##<a id='prereqs'></a> Prerequisites

The procedures in this topic have the following prerequisites:

* You must have a Pivotal Cloud Foundry (PCF) deployment with Ops Manager v2.0 and PKS installed.

* You must have the [PKS CLI](installing-pks-cli.html) installed.

* You must have an external load balancer configured to forward traffic to the PKS API endpoint. For more information, see the [Step 6: Configure External Load Balancer](installing.html#loadbalancer-pks-api) section of <em>Installing and Configuring PKS</em>.

* You must have your PKS API endpoint and your PKS API credentials. To retrieve these values, the operator performs the following steps:
  1. Navigate to the **Pivotal Container Service** tile in the Ops Manager Installation Dashboard. 
  1. Click the **Status** tab.
  1. Retrieve the PKS API endpoint under **IPs**, and the PKS API credentials under **PKS Basic Auth**.
  <p class="note"><strong>Note</strong> If your PKS installation is integrated with NSX-T, developers should use the DNAT IP address assigned in <a href="installing-nsx-t.html#apply-changes">Step 6: Apply Changes and Retrieve the PKS Endpoint</a> of <em>Installing and Configuring PKS with NSX-T Integration</em>.</p>

##<a id='create-cluster'></a> Create Cluster

Run the following command to log in using the PKS CLI:

```
pks login -a PKS_API -u USERNAME -p PASSWORD
```

Where:

* `PKS_API` is your PKS API endpoint, including the port. For example, `https://10.85.102.12:9021`.
* `USERNAME` is your PKS API username.
* `PASSWORD` is your PKS API password.


To create a cluster using the PKS CLI, run the following command:

```
pks create-cluster CLUSTER-NAME --external-hostname HOSTNAME [--num-nodes WORKER-NODES]
```

Where:

* `CLUSTER-NAME` is a unique name for your cluster.
* `HOSTNAME` is an external hostname for accessing your Kubernetes API, such as a load balancer. If your PKS installation is integrated with NSX-T, this may be the NAT IP from the `ip-pool-vips` NSX IP pool. For more information, see [Step 7: Enable NAT Access](installing-nsx-t.html#nsxt-master-nat) in <em>Installing and Configuring PKS with NSX-T Integration</em>.
* `WORKER-NODES` is the number of worker nodes for the cluster. The maximum is 50. This flag is optional. 

For example:
<pre class="terminal">$ pks create-cluster my-cluster --external-hostname 10.0.0.1 --num-nodes 3</pre>

To create a cluster using `curl`, perform the following steps:

1. Choose a unique name for your cluster and set it as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Retrieve the IP address of your external load balancer and set it as an environment variable named `KUBERNETES_SERVICE_HOST`. For example:
  <pre class="terminal">$ export KUBERNETES\_SERVICE\_HOST="192.0.2.0"</pre>

1. Choose either attribute-based access control (ABAC) or role-based access control (RBAC) for your authorization mode. Set an environment variable named `AUTHORIZATION_MODE` to `abac` or `rbac`. For example:
  <pre class="terminal">$ export AUTHORIZATION\_MODE="rbac"</pre>
  For more information about authorization modes, see the [Kubernetes documentation](https://kubernetes.io/docs/admin/authorization/#authorization-modules).

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Create a cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X POST \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  -d "{\"name\": \"$CLUSTER\_NAME\",\"parameters\": \
  {\"kubernetes\_master\_host\": \"$KUBERNETES\_SERVICE\_HOST\", \
   \"authorization\_mode\": \"$AUTHORIZATION\_MODE\" }}" \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/</pre>
  <br>
  By default, the Kubernetes API listens on port 8443. To configure a different port, add the `kubernetes_master_port` parameter to the `curl` command above and set it to your desired port.
  <br><br>
  This command creates a cluster with 1 master, 1 etcd node, and the number of worker nodes specified when configuring the **Plan** section of the PKS tile. For more information, see [Plan](installing.html#plan) in <em>Installing and Configuring PKS</em>.
  <br><br>
  To create a cluster with more workers, perform the following steps:
    1. Set the environment variable named `KUBERNETES_WORKER_INSTANCES` to your desired number of Kubernetes worker nodes. This value must be between 1 and 50, inclusive. For example:
    <pre class="terminal">$ export KUBERNETES\_WORKER\_INSTANCES=3</pre>
    1. Create the cluster with the following command:
      <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X POST \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json;charset=UTF-8' \
      -d "{\"name\": \"$CLUSTER\_NAME\",\"parameters\": \
      {\"kubernetes\_master\_host\": \"$KUBERNETES\_SERVICE\_HOST\", \
      \"kubernetes\_worker\_instances\": $KUBERNETES\_WORKER\_INSTANCES, \
      \"authorization\_mode\": \"$AUTHORIZATION\_MODE\" }}" \
      https://$PKS\_API\_ENDPOINT:9021/v1/clusters/</pre>

2. Ensure your operator has configured the external load balancer to point to the newly created cluster's master VM.

##<a id='get-credentials'></a> Retrieve Cluster Credentials and Configuration

To retrieve the credentials and configuration using the PKS CLI, run the following command:

```
pks get-credentials CLUSTER-NAME
```

Where:

* `CLUSTER-NAME` is a unique name for your cluster.

For example:
<pre class="terminal">$ pks get-credentials my-cluster</pre>

The `pks get-credentials` command can perform the following actions:

  - Fetch the cluster's `kubeconfig`
  - Add the cluster's `kubeconfig` to the existing `kubeconfig`
  - Create a new `kubeconfig` if none exists
  - Switch the context to the `CLUSTER-NAME` provided

The `kubeconfig` file path works the same way as `kubectl`.
To set the `kubeconfig` file path, use the `KUBECONFIG` environment variable.
If you do not set the file path, the default path is `$HOME/.kube/config`.

To retrieve cluster credentials and configuration using `curl`, perform the following steps:

1. Retrieve the cluster credentials and configuration with the following command and export the output as an environment variable named `CREDENTIALS`:
  <pre class="terminal">$ export CREDENTIALS="$(curl -k -u $PKS_API_CREDS -s -X POST \
  --header 'Content-Type: application/json' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/binds)"
  </pre>

    If the command completes successfully, it will save a JSON response with the cluster credentials and the cluster configuration, known as the kubeconfig. If you `echo $CREDENTIALS`, the response resembles the following:
    <pre class="terminal">
    {
      "apiVersion": "v1",
      "clusters": [
        {
          "cluster": {
            "certificate-authority-data": "some\_data",
            "server": "http<span>s:/</span>/server"
          },
          "name": "kubo-cluster"
        }
      ],
      "contexts": [
        {
          "context": {
            "cluster": "kubo-cluster",
            "user": "some\_user"
          },
          "name": "kubo-cluster"
        }
      ],
      "current-context": "kubo-cluster",
      "kind": "Config",
      "preferences": {},
      "users": [
        {
          "name": "some\_name",
          "user": {
            "token": "some\_token"
          }
        }
      ]
    }
    </pre>
2. Use `echo` to set the kubeconfig in `$HOME/.kube/config`:
  <pre class="terminal">$ echo $CREDENTIALS > "${HOME}/.kube/config"</pre>
    <p class="note"><strong>Note</strong>: If you have an existing file at <code>$HOME/.kube/config</code>, the BOSH CLI command will overwrite it.</p>

You can use the credentials and the kubeconfig to deploy application workloads to your cluster with `kubectl`. For more information about accessing your cluster, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/).

##<a id='view-cluster-list'></a> View Cluster List

To view the list of deployed clusters using the PKS CLI, run the following command:
<pre class="terminal">$ pks list-clusters</pre>

To view the list of deployed clusters using `curl`, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View information about the deployed clusters with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters</pre>
  The response lists details about the deployed clusters, including cluster name and status.

##<a id='view-cluster'></a> View Cluster Details

To view the details of an individual cluster using the PKS CLI, run `pks show-cluster CLUSTER-NAME`, specifying the name of the cluster. For example:
<pre class="terminal">$ pks show-cluster my-cluster</pre>

To view the details of an individual cluster using `curl`, perform the following steps:

1. Set the name of the cluster as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View details about the cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>

##<a id='view-cluster-plans'></a> View Cluster Plans

To view information about the available plans for deploying a cluster, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View information about the available plans with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/plans</pre>
  The response lists details about the available plans, including the plan name and description.

##<a id='scale-clusters'></a> Scale Existing Clusters

To scale up a cluster using the PKS CLI, run the following command:

```
pks resize CLUSTER-NAME --num-nodes WORKER-NODES
```

Where:

* `CLUSTER-NAME` is the name of your cluster.
* `WORKER-NODES` is the number of worker nodes for the cluster. The maximum is 50.  

<p class="note"><strong>Note</strong>: The number of worker nodes cannot be scaled down, only up.</p>

For example:
<pre class="terminal">$ pks resize my-cluster --num-nodes 5</pre>

To scale up the number of worker nodes in your cluster using `curl`, perform the following commands:

1. Set the name for the cluster as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Set the environment variable named `KUBERNETES_WORKER_INSTANCES` to your desired number of Kubernetes worker nodes. This value must be between 1 and 50, inclusive. For example:
  <pre class="terminal">$ export KUBERNETES\_WORKER\_INSTANCES=3</pre>
  <p class="note"><strong>Note</strong>: The number of worker nodes cannot be scaled down, only up.</p>

1. Scale the number of Kubernetes worker nodes with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X PATCH \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    -d '{"kubernetes_worker_instances": $KUBERNETES\_WORKER\_INSTANCES }'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>
  There is currently no response from the command.

##<a id='delete-cluster'></a> Delete Cluster

To delete a cluster using the PKS CLI, run `pks delete-cluster CLUSTER-NAME`, specifying the name of the cluster. For example:

<pre class="terminal">$ pks delete-cluster my-cluster</pre>

To delete a cluster using `curl`, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Set the name of the cluster you want to delete as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Delete the cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X DELETE \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>
