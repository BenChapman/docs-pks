---
title: Using PKS
owner: PKS
---

<p class="note"><strong>Note</strong>: The PKS documentation is under development. This topic will continue to be updated and expanded to reflect the most current information.</p>

This topic describes how to use Pivotal Container Service (PKS).

After an operator has [installed](installing.html) PKS, developers can use `curl` or the PKS CLI to do the following:

* [Create](#create-cluster) a Kubernetes cluster
* [Retrieve the credentials and configuration](#get-credentials) for a Kubernetes cluster so that developers can deploy application workloads to the cluster with `kubectl`
* [View](#view-cluster-list) the list of running Kubernetes clusters
* [View](#view-cluster) details about a Kubernetes cluster 
* [View](#view-cluster-plans) the list of available plans for deploying a Kubernetes cluster
* [Resize](#resize) the number of worker nodes in a Kubernetes cluster
* [Delete](#delete-cluster) a Kubernetes cluster

To deploy application workloads to a Kubernetes cluster, developers use `kubectl`, the Kubernetes CLI. 
To download and install `kubectl`, see the [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-curl) topic in the Kubernetes documentation.
For more information about using `kubectl`, see the `kubectl` [documentation](https://kubernetes.io/docs/user-guide/kubectl-overview/).

##<a id='prereqs'></a> Prerequisites

The procedures in this topic have the following prerequisites:

* A Pivotal Cloud Foundry (PCF) deployment with Ops Manager and PKS installed, but not Pivotal Application Service (PAS). The procedures in this topic only work if PAS is not installed.

* An external load balancer must be configured to forward traffic to the PKS API endpoint. For more information, see the [Step 6: Configure External Load Balancer](installing.html#loadbalancer-pks-api) section of <em>Installing and Configuring PKS</em>.

* You must have your PKS API endpoint and your PKS API credentials. To retrieve these values, the operator performs the following steps:
  1. Navigate to the **Pivotal Container Service** tile in the Ops Manager Installation Dashboard. 
  1. Click the **Status** tab.
  1. Retrieve the PKS API endpoint under **IPs**, and the PKS API credentials under **PKS Basic Auth**.

###<a id='install-cli'></a> Install the PKS CLI

<p class="note"><strong>Note</strong>: The PKS CLI is under active development and the commands may change.</p>

To install the PKS CLI, follow the procedures for [Linux/MacOS X](#pks-cli-linux-mac) or [Windows](#pks-cli-windows).

Binaries are only provided for 64-bit architectures.

####<a id="pks-cli-linux-mac"></a> Linux/Mac OS X

1. Download the [MacOS X](https://storage.googleapis.com/pks-public/bin/darwin/pks) or the [Linux](https://storage.googleapis.com/pks-public/bin/linux/pks) binary:  
  * For MacOS X, enter the following command: 
    <pre class="terminal">$ curl -LO http<span>s:</span>//storage.googleapis.com/pks-public/bin/darwin/pks</pre>
  * For Linux, enter the following command: 
    <pre class="terminal">$ curl -LO http<span>s:</span>//storage.googleapis.com/pks-public/bin/linux/pks</pre>
2. Make the PKS binary executable: 
  <pre class="terminal">$ chmod +x pks</pre>
3. Move the binary into your `PATH`. For example:
  <pre class="terminal">$ mv pks /usr/local/bin/pks</pre>

####<a id="pks-cli-windows"></a> Windows

1. Download the [Windows](https://storage.googleapis.com/pks-public/bin/windows/pks.exe) binary.
  <pre class="terminal">$ curl -LO http<span>s:</span>//storage.googleapis.com/pks-public/bin/windows/pks</pre>

2. Move the binary into your `PATH`.

###<a id='pks-cli-login'></a> Log In Using the PKS CLI

To use the PKS CLI procedures in this topic, you must log in.

Run the following command to log in:

```
pks login -a PKS_API -u USERNAME -p PASSWORD
```

Where:

* `PKS_API` is your PKS API endpoint, including the port. For example, `https://10.85.102.12:9021`.
* `USERNAME` is your PKS API username.
* `PASSWORD` is your PKS API password.

##<a id='create-cluster'></a> Create Cluster

To create a cluster using the PKS CLI, run the following command:

```
pks create-cluster CLUSTER_NAME --external-hostname HOSTNAME [--num-nodes WORKER_NODES]
```

Where:

* `CLUSTER_NAME` is a unique name for your cluster.
* `HOSTNAME` is an external hostname for accessing your Kubernetes API, such as a load balancer.
* `WORKER_NODES` is the number of worker nodes for the cluster. This flag is optional. Note: There is an upper limit that caps you at 50 workers.

For example:
<pre class="terminal">$ pks create-cluster my-cluster --external-hostname 10.0.0.1 --num-nodes 3</pre>

To create a cluster using `curl`, perform the following steps:

1. Choose a unique name for your cluster and set it as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Retrieve the IP address of your external load balancer and set it as an environment variable named `KUBERNETES_SERVICE_HOST`. For example:
  <pre class="terminal">$ export KUBERNETES\_SERVICE\_HOST="192.0.2.0"</pre>

1. Choose either attribute-based access control (ABAC) or role-based access control (RBAC) for your authorization mode. Set an environment variable named `AUTHORIZATION_MODE` to `abac` or `rbac`. For example:
  <pre class="terminal">$ export AUTHORIZATION\_MODE="rbac"</pre>
  For more information about authorization modes, see the [Kubernetes documentation](https://kubernetes.io/docs/admin/authorization/#authorization-modules).

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Create a cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X POST \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  -d "{\"name\": \"$CLUSTER\_NAME\",\"parameters\": \
  {\"kubernetes\_master\_host\": \"$KUBERNETES\_SERVICE\_HOST\", \
   \"authorization\_mode\": \"$AUTHORIZATION\_MODE\" }}" \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/</pre>
  <br>
  By default, the Kubernetes API listens on port 8443. To configure a different port, add the `kubernetes_master_port` parameter to the `curl` command above and set it to your desired port.
  <br><br>
  This command creates a cluster with 1 master, 1 etcd node, and the number of worker nodes specified when configuring the **Plan** section of the PKS tile. For more information, see [Plan](installing.html#plan) in <em>Installing and Configuring PKS</em>.
  <br><br>
  To create a cluster with more workers, perform the following steps:
    1. Set the environment variable named `KUBERNETES_WORKER_INSTANCES` to your desired number of Kubernetes worker nodes. This value must be between 1 and 50, inclusive. For example:
    <pre class="terminal">$ export KUBERNETES\_WORKER\_INSTANCES=3</pre>
    1. Create the cluster with the following command:
      <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X POST \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json;charset=UTF-8' \
      -d "{\"name\": \"$CLUSTER\_NAME\",\"parameters\": \
      {\"kubernetes\_master\_host\": \"$KUBERNETES\_SERVICE\_HOST\", \
      \"kubernetes\_worker\_instances\": $KUBERNETES\_WORKER\_INSTANCES, \
      \"authorization\_mode\": \"$AUTHORIZATION\_MODE\" }}" \
      https://$PKS\_API\_ENDPOINT:9021/v1/clusters/</pre>

2. Ensure your operator has configured the external load balancer to point to the newly created cluster's master VM.

##<a id='get-credentials'></a> Retrieve Cluster Credentials and Configuration

To retrieve cluster credentials and configuration so that developers can deploy application workloads to the cluster with `kubectl`, perform the following steps:

1. Retrieve the cluster credentials and configuration with the following command and export the output as an environment variable named `CREDENTIALS`:
  <pre class="terminal">$ export CREDENTIALS="$(curl -k -u $PKS_API_CREDS -s -X POST \
  --header 'Content-Type: application/json' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/binds)"
  </pre>

    If the command completes successfully, it will save a JSON response with the cluster credentials and the cluster configuration, known as the kubeconfig. If you `echo $CREDENTIALS`, the response resembles the following:
    <pre class="terminal">
    {
      "credentials": {
        "kubeconfig": {
          "apiVersion": "v1",
          "clusters": [
            {
              "cluster": {
                "certificate-authority-data": "some\_data",
                "server": "http<span>s:/</span>/server"
              },
              "name": "kubo-cluster"
            }
          ],
          "contexts": [
            {
              "context": {
                "cluster": "kubo-cluster",
                "user": "some\_user"
              },
              "name": "kubo-cluster"
            }
          ],
          "current-context": "kubo-cluster",
          "kind": "Config",
          "preferences": {},
          "users": [
            {
              "name": "some\_name",
              "user": {
                "token": "some\_token"
              }
            }
          ]
        }
      }
    }
    </pre>
2. Use the [BOSH CLI v2](https://bosh.io/docs/cli-v2.html) to convert the JSON output to a YAML file at `$HOME/.kube/config`:
  <pre class="terminal">$ bosh int <(echo "${CREDENTIALS}") --path="/credentials/kubeconfig" > "${HOME}/.kube/config"</pre>
    <p class="note"><strong>Note</strong>: If you have an existing file at <code>$HOME/.kube/config</code>, the BOSH CLI command will overwrite it.</p>

You can use the credentials and the kubeconfig to deploy application workloads to your cluster with `kubectl`. For more information about accessing your cluster, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/).

##<a id='view-cluster-list'></a> View Cluster List

To view the list of deployed clusters using the PKS CLI, run the following command:
<pre class="terminal">$ pks list-clusters</pre>

To view the list of deployed clusters using `curl`, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View information about the deployed clusters with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters</pre>
  The response lists details about the deployed clusters, including cluster name and status.

##<a id='view-cluster'></a> View Cluster Details

To view the details of an individual cluster using the PKS CLI, run `pks show-cluster CLUSTER_NAME`, specifying the name of the cluster. For example:
<pre class="terminal">$ pks show-cluster my-cluster</pre>

To view the details of an individual cluster using `curl`, perform the following steps:

1. Set the name of the cluster as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View details about the cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>

##<a id='view-cluster-plans'></a> View Cluster Plans

To view information about the available plans for deploying a cluster, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. View information about the available plans with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/plans</pre>
  The response lists details about the available plans, including the plan name and description.

##<a id='scale-clusters'></a> Scale Existing Clusters

To resize a cluster using the PKS CLI, run the following command:

```
pks resize CLUSTER_NAME --num-nodes WORKER_NODES
```

Where:

* `CLUSTER_NAME` is a unique name for your cluster.
* `WORKER_NODES` is the number of worker nodes for the cluster. This flag is optional. Note: There is an upper limit that caps you at 50 workers.

For example:
<pre class="terminal">$ pks resize my-cluster --num-nodes 5</pre>


To scale up the number of worker nodes in your cluster using `curl`, perform the following commands:

1. Set the name for the cluster as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Set the environment variable named `KUBERNETES_WORKER_INSTANCES` to your desired number of Kubernetes worker nodes. This value must be between 1 and 50, inclusive. For example:
  <pre class="terminal">$ export KUBERNETES\_WORKER\_INSTANCES=3</pre>
  <p class="note"><strong>Note</strong>: The number of worker nodes cannot be scaled down, only up.</p>

1. Scale the number of Kubernetes worker nodes with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X PATCH \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    -d '{"kubernetes_worker_instances": $KUBERNETES\_WORKER\_INSTANCES }'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>
  There is currently no response from the command.

##<a id='delete-cluster'></a> Delete Cluster

To delete a cluster using the PKS CLI, run the following command:

```
pks delete-cluster CLUSTER_NAME
```

Where:

* `CLUSTER_NAME` is a unique name for your cluster.

For example:
<pre class="terminal">$ pks delete-cluster my-cluster</pre>


To delete a cluster using `curl`, perform the following steps:

1. Set your PKS API endpoint as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set your PKS API credentials as an environment variable named `PKS_API_CREDS`. For example:
  <pre class="terminal">$ export PKS\_API\_CREDS="username:password"</pre>

1. Set the name of the cluster you want to delete as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Delete the cluster with the following command:
  <pre class="terminal">$ curl -k -u $PKS\_API\_CREDS -s -X DELETE \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>
